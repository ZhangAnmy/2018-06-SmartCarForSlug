package factory.controller;



import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import factory.entity.Car;
import factory.entity.Record;
import factory.entity.Site;
import factory.entity.User;
import factory.service.CarService;
import factory.service.RecordService;
import factory.service.SiteService;
import factory.service.UserService;

@Controller
@RequestMapping(value="record")
public class RecordController {
	@Autowired
	private RecordService recordService;
	@Autowired
	private UserService userService;
	@Autowired
	private SiteService siteService;
	@Autowired
	private CarService carService;
	
	private static Log log=LogFactory.getLog(RecordController.class);
	/**
	 * @description:从record表中查询所有记录
	 */
	@RequestMapping("/jumpToRecord")
	public ModelAndView querySiteAndDriver(ModelAndView mv){
		log.info("调用查询工厂和司机的方法");
		List<User> drivers=userService.quertAllDriver();
		List<Site> sites=siteService.queryAllSite();		
		mv.addObject("driverList",drivers);
		mv.addObject("siteList",sites);
		mv.setViewName("record/records");
		return mv;
	}
	
	@RequestMapping("queryAllRecord")
	@ResponseBody
	public List<Record> queryAllRecord(){
		log.info("调用queryAllRecord");
		List<Record> records=recordService.queryAllRecord();
		return records;
	}
	
	
	@RequestMapping("queryRecordBySiteName")
	@ResponseBody
	public  List<Record> queryRecordBySiteName(@RequestParam("siteName") String siteName,Model model){
		log.info("调用queryRecordBySiteName");
		List<Record> records=recordService.queryRecordBySiteName(siteName);
		return records;	
	}
	
	
	
	@RequestMapping("queryRecordByDriverName")
	@ResponseBody
	public List<Record> queryRecordByDriverName(@RequestParam("driverName") String driverName){
		log.info("调用queryRecordByDriverName");
		List<Record> records=recordService.queryRecordByDriverName(driverName);
		return records;
	}
	
	@RequestMapping("queryRecordByDate")
	@ResponseBody
	public List<Record> queryRecordByDate(@RequestParam("startDate") String startDate,@RequestParam("endDate") String endDate){
		log.info("调用queryRecordByDate");
		List<Record> records=recordService.queryRecordByDate(startDate, endDate);
		return records;
	}
	
	@RequestMapping("editRecord")
	@ResponseBody
	public Map<String, String> editRecord(@RequestBody Map<String,Object> jsonMap){
		log.info("调用editRecord");
		User driver=userService.queryUserByRealName(String.valueOf(jsonMap.get("driverName")));
		Car car=carService.queryCarByDriverId(driver.getId());
		String recordIdString=String.valueOf(jsonMap.get("recordId"));
		int recordId=Integer.parseInt(recordIdString);
		recordService.updateCarId(recordId, car.getId());
		Map<String, String> map=new HashMap<String, String>();
		map.put("driverName", driver.getRealname());
		map.put("license", car.getLicense());
		map.put("telephone",driver.getTelephone());
		return map;
	}
	
	@RequestMapping("deleteRecord")
	@ResponseBody
	public List<Object> deleteRecord(@RequestParam("recordId") int recordId){
		recordService.deleteRecord(recordId);
		return null;
		
	}
	
	
	
	@RequestMapping("/recordOfOneDriver")
	public ModelAndView recordOfOneDriver(ModelAndView mv){
		log.info("调用查询工厂的方法");
		List<Site> sites=siteService.queryAllSite();		
		mv.addObject("siteList",sites);
		mv.setViewName("worker/record");
		return mv;
	}
	
	@RequestMapping("queryAllRecordOfOneDriver")
	@ResponseBody
	public List<Record> queryAllRecordOfOneDriver(@RequestBody User user){
		log.info("调用queryAllRecordOfOneDriver");
		System.out.println(user.getId());
		List<Record> records=recordService.queryAllRecordOfOneDriver(user.getId());
		return records;
	}
	
	@RequestMapping("queryRecordBySiteIdOfOneDriver")
	@ResponseBody
	public  List<Record> queryRecordBySiteIdOfOneDriver(@RequestBody Map<String, Integer> condition){
		log.info("调用queryRecordBySiteIdOfOneDriver");
		List<Record> records=recordService.queryRecordBySiteIdOfOneDriver(condition);
		return records;	
	}
	
	@RequestMapping("queryRecordByDateOfOneDriver")
	@ResponseBody
	public List<Record> queryRecordByDateOfOneDriver(@RequestBody Map<String, Object> condition){
		log.info("调用queryRecordByDateOfOneDriver");
		List<Record> records=recordService.queryRecordByDateOfOneDriver(condition);
		return records;
	}

}
